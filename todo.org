#+TITLE: Asynchronous HTTP Client - Clojure - To Do
#+AUTHOR: Hubert Iwaniuk
#+EMAIL: neotyk@kungfoo.pl
#+INFOJS_OPT: view:info toc:1

* Receive [6/6]                                                   :code:rel1:
** DONE Status Line                                                    :rel1:
** DONE Headers                                                        :rel1:
** DONE Body                                                           :rel1:
   Instead of *id*, pass *(ref {})* to callbacks so they have their own
   STM ref'ed map.
** DONE Implement response *promise*                                   :rel1:
** DONE Consume stream                                                 :rel1:
** DONE Error function                                                 :rel1:
* Send [6/9]                                                           :code:
** DONE Query parameters                                               :rel1:
** DONE Parameters                                                     :rel1:
** DONE Parameters allowed only on PUT/POST                            :rel1:
** DONE Cookies                                                        :rel3:
*** DONE Describe                                                      :rel3:
** DONE PUT/POST body [3/3]                                            :rel1:
*** DONE Support sending strings                                       :rel1:
*** DONE Support sending map as form encoded data                      :rel1:
*** DONE Support InputStream body                                      :rel1:
** TODO All HTTP verbs [6/7]
*** DONE GET                                                           :rel1:
*** DONE POST                                                          :rel1:
*** DONE PUT                                                           :rel1:
*** DONE DELETE                                                        :rel1:
*** DONE HEAD                                                          :rel1:
*** DONE OPTIONS                                                       :rel1:
*** TODO Others, once supported by AHC-Java                            :rel4:
** TODO PUT/POST streaming body                                        :rel4:
   That can be done with *clojure.core/add-watch*.
   Watcher in that scenario will grab new content and write it via
   AHC, or alternatively will *clojure.core/send-off* to execute
   IO operation in separate thread.
** TODO Multipart                                                      :rel4:
** DONE Authentication                                                 :rel3:
*** DONE Test Authentication
* Configuration [0/2]
** TODO Global configuration of AHC [4/4]                              :rel4:
*** DONE Branding User-agent                                           :rel3:
*** DONE Connection limiting per host.                                 :rel4:
*** DONE Global proxy.                                                 :rel4:
*** DONE Timeout settings                                              :rel4:
**** DONE Request timeout                                              :rel4:
**** DONE Connection timeout                                           :rel4:
**** DONE Idle connection timeout                                      :rel4:
** TODO Per request configuration [1/2]                                :rel4:
*** DONE Proxy configuration                                           :rel3:
*** TODO Timeout                                                       :rel4:
**** DONE Request timeout                                              :rel4:
**** TODO Connection timeout                                           :rel4:
**** TODO Idle connection timeout                                      :rel4:
* Tasks [12/12]
** DONE License                                                        :rel1:
** DONE Cleanup namespaces                                             :rel1:
*** async.http.client
    Should contain helper functions to call all HTTP verbs.
    Default set of call-backs.
*** async.http.client.request
    Lower level of requesting:
    - execute-request
    - prepare-request
** DONE Release 0.1.0                                                  :rel1:
** DONE Release 0.1.1                                                  :rel2:
** DONE Release 0.2.0                                                  :rel3:
   Changes:
   - Stream as seq
   - Streams used instead of byte vectors (issue-1)
   - keyworded maps are used in api
*** DONE Create a changelog                                            :rel3:
** DONE Release 0.2.1
   Release bumps version of async-http-client to v1.3.2.
** DONE Make tests stand-alone                                         :rel1:
   Test suite should not fail when there is now hello-www on port 8080.
** DONE Simplify request preparation                                   :rel1:
   For now fns like GET will call prepare-get that will call
   prepare-reqeust. I don't think prepare-get is necessary,
   should be quite fine to only use *prepare-request*.
** DONE Use last argument as key worded map                            :rel3:
   As suggested by [[http://blog.licenser.net/][Licenser]] on #clojure [[http://clojure-log.n01se.net/date/2010-07-08.html#i25][here]].
** DONE Review documentation                                           :rel3:
** DONE Refactoring [1/1]                                              :rel3:
*** DONE Refactor *execute-request* [2/2]
**** DONE Build checkable promise
     To check if promise was delivered use *delivered?*
**** DONE Unify *execute-request* and *consume-stream* interfaces
     - Use new checkable *promise* for different parts of response
     - Use normal map for response instead of (ref {})
     - Provide helper functions to deal with metadata on response
** DONE Rename to *http.async.client*                                  :rel3:
